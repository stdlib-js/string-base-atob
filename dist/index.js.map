{
  "version": 3,
  "sources": ["../lib/global.js", "../lib/main.js", "../lib/re_non_ascii.js", "../lib/polyfill.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = atob;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar globalAtob = require( './global.js' );\n\n\n// MAIN //\n\n/**\n* Decodes a string of data which has been encoded using Base64 encoding.\n*\n* @param {string} str - binary string containing base64-encoded data\n* @returns {(string|null)} an ASCII string containing decoded data\n*\n* @example\n* var out = atob( 'SGVsbG8sIHdvcmxk' );\n* // returns 'Hello, world'\n*/\nfunction atob( str ) { // eslint-disable-line stdlib/no-redeclare\n\ttry {\n\t\treturn globalAtob( str );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn null;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = atob;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar RE_NON_ASCII = /[^\\u0000-\\u007F]/; // eslint-disable-line no-control-regex\n\n\n// EXPORTS //\n\nmodule.exports = RE_NON_ASCII;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar string2buffer = require( '@stdlib/buffer-from-string' );\nvar RE_NON_ASCII = require( './re_non_ascii.js' );\n\n\n// MAIN //\n\n/**\n* Decodes a string of data which has been encoded using Base64 encoding.\n*\n* ## Notes\n*\n* -   Alternative (non-Buffer-based) implementations exist. For example,\n*\n*     -   jsdom: <https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/atob.js>\n*     -   base64: <https://github.com/mathiasbynens/base64/blob/913b89753d99362855c71c02d04384d1d1a9c2fd/src/base64.js>\n*\n*     However, having a polyfill is really only required for older Node.js versions `<16.0.0` (see the browser compatibility table at <https://developer.mozilla.org/en-US/docs/Web/API/Window/atob>). Hence, we can use a Node.js-oriented polyfill leveraging `Buffer` with the expectation that bundle size is not an overarching concern.\n*\n* @private\n* @param {string} str - binary string containing base64-encoded data\n* @returns {(string|null)} an ASCII string containing decoded data\n*\n* @example\n* var out = atob( 'SGVsbG8sIHdvcmxk' );\n* // returns 'Hello, world'\n*/\nfunction atob( str ) { // eslint-disable-line stdlib/no-redeclare\n\t// `atob` only allows converting ASCII characters to Base64, and, when Node.js's `Buffer` tries converting a non-ASCII character, it simply ignores it. Accordingly, we need to explicitly check whether the input string contains non-ASCII characters in order to ensure consistency with the non-polyfilled implementation...\n\tif ( RE_NON_ASCII.test( str ) ) {\n\t\treturn null;\n\t}\n\treturn string2buffer( str, 'base64' ).toString( 'utf8' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = atob;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Decode a string of data which has been encoded using Base64 encoding.\n*\n* @module @stdlib/string-base-atob\n*\n* @example\n* var atob = require( '@stdlib/string-base-atob' );\n*\n* var out = atob( 'SGVsbG8sIHdvcmxk' );\n* // returns 'Hello, world'\n*/\n\n// MODULES //\n\nvar hasAtobSupport = require( '@stdlib/assert-has-atob-support' );\nvar builtin = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar main;\nif ( hasAtobSupport() ) {\n\tmain = builtin;\n} else {\n\tmain = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBAA,EAAO,QAAU,OCtBjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,IAejB,SAASC,EAAMC,EAAM,CACpB,GAAI,CACH,OAAOF,EAAYE,CAAI,CACxB,OAAUC,EAAM,CACf,OAAO,IACR,CACD,CAKAJ,EAAO,QAAUE,IChDjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAe,mBAKnBD,EAAO,QAAUC,IC3BjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,4BAA6B,EACtDC,EAAe,IAyBnB,SAASC,EAAMC,EAAM,CAEpB,OAAKF,EAAa,KAAME,CAAI,EACpB,KAEDH,EAAeG,EAAK,QAAS,EAAE,SAAU,MAAO,CACxD,CAKAJ,EAAO,QAAUG,ICzBjB,IAAIE,EAAiB,QAAS,iCAAkC,EAC5DC,EAAU,IACVC,EAAW,IAKXC,EACCH,EAAe,EACnBG,EAAOF,EAEPE,EAAOD,EAMR,OAAO,QAAUC",
  "names": ["require_global", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "globalAtob", "atob", "str", "err", "require_re_non_ascii", "__commonJSMin", "exports", "module", "RE_NON_ASCII", "require_polyfill", "__commonJSMin", "exports", "module", "string2buffer", "RE_NON_ASCII", "atob", "str", "hasAtobSupport", "builtin", "polyfill", "main"]
}
